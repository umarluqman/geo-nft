/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NFTDescriptorTestInterface extends ethers.utils.Interface {
  functions: {
    "addressToString(address)": FunctionFragment;
    "constructTokenURI(tuple)": FunctionFragment;
    "generateSVGImage(tuple)": FunctionFragment;
    "isRare(uint256,string)": FunctionFragment;
    "toColorHex(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressToString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "constructTokenURI",
    values: [
      {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [
      {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRare",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "toColorHex",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toColorHex", data: BytesLike): Result;

  events: {};
}

export class NFTDescriptorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTDescriptorTestInterface;

  functions: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addressToString(_address: string, overrides?: CallOverrides): Promise<string>;

  constructTokenURI(
    params: {
      tokenId: BigNumberish;
      blockNumber: BigNumberish;
      stakeAmount: BigNumberish;
      uTokenAddress: string;
      name: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGImage(
    params: {
      tokenId: BigNumberish;
      blockNumber: BigNumberish;
      stakeAmount: BigNumberish;
      uTokenAddress: string;
      name: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  isRare(
    tokenId: BigNumberish,
    poolAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toColorHex(
    token: string,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        blockNumber: BigNumberish;
        stakeAmount: BigNumberish;
        uTokenAddress: string;
        name: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
